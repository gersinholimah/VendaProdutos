@model VendaProdutos.Models.Pedido

@{
    ViewData["Title"] = "Edit";
}





<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>




<div class="container admin">
    <div class="row">
        <div class="col-12">
            <h1>Pedido: @Model.PedidoId</h1>

            <p>Não inclui os itens adicionados ao Pedido</p>
            <hr />
            <form asp-action="Edit">




                <div class=" ">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="PedidoId" />

                    <ul class="nav nav-tabs mb-3" id="myTabs">
                        <li class="nav-item">
                            <a class=" active btn btn-primary" id="tab1-tab" data-toggle="tab" href="#tab1">EXIBIR PAGAMENTO</a>
                        </li>
                        <li class="nav-item">
                            <a class=" btn btn-primary" id="tab2-tab" data-toggle="tab" href="#tab2">EXIBIR TUDO</a>
                        </li>
                    </ul>
                    <div class="tab-pane fade show active" id="tab1">
                    </div>
                    <div class="tab-pane fade row" id="tab2">
                        <div class="form-group col-md-4">
                            <label asp-for="NomeComprador" class="control-label"></label>
                            <input autocomplete="off" asp-for="NomeComprador" class="form-control" />
                            <span asp-validation-for="NomeComprador" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="WhatsappComprador" class="control-label"></label>
                            <input autocomplete="off" asp-for="WhatsappComprador" class="form-control" />
                            <span asp-validation-for="WhatsappComprador" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="TelefoneCompradorDiferenteDoCadastro" class="control-label">Whatsapp diferente do informado</label>
                            <input autocomplete="off" asp-for="TelefoneCompradorDiferenteDoCadastro" class="form-control" />
                            <span asp-validation-for="TelefoneCompradorDiferenteDoCadastro" class="text-danger"></span>
                        </div>
                        <div class=" col-md-12">
                            <h4 class="mb-3">Endereço da entrega</h4>
                        </div>

                        <div class="form-group col-md-4">
                            <label asp-for="BairroRecebedor" class="control-label"></label>
                            <input autocomplete="off" asp-for="BairroRecebedor" class="form-control" />
                            <span asp-validation-for="BairroRecebedor" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="RuaRecebedor" class="control-label"></label>
                            <input autocomplete="off" asp-for="RuaRecebedor" class="form-control" />
                            <span asp-validation-for="RuaRecebedor" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="NumeroCasaRecebedor" class="control-label"></label>
                            <input autocomplete="off" asp-for="NumeroCasaRecebedor" class="form-control" />
                            <span asp-validation-for="NumeroCasaRecebedor" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="PontoDeReferencia" class="control-label"></label>
                            <input autocomplete="off" asp-for="PontoDeReferencia" class="form-control" />
                            <span asp-validation-for="PontoDeReferencia" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="Complemento" class="control-label"></label>
                            <input autocomplete="off" asp-for="Complemento" class="form-control" />
                            <span asp-validation-for="Complemento" class="text-danger"></span>
                        </div>

                        <div class="form-group col-md-4">
                            <label asp-for="NomeDaEmpresa" class="control-label"></label>
                            <input autocomplete="off" asp-for="NomeDaEmpresa" class="form-control" />
                            <span asp-validation-for="NomeDaEmpresa" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="Setor" class="control-label"></label>
                            <input autocomplete="off" asp-for="Setor" class="form-control" />
                            <span asp-validation-for="Setor" class="text-danger"></span>
                        </div>

                        <div class=" col-12">
                            <h4 class="mb-3">Informações complementáres</h4>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="QuemEstaEnviando" class="control-label"></label>
                            <input autocomplete="off" asp-for="QuemEstaEnviando" class="form-control" />
                            <span asp-validation-for="QuemEstaEnviando" class="text-danger"></span>
                        </div>

                        <div class="form-group col-md-4">

                            <label asp-for="NomeRecebedor" class="control-label"></label>
                            <input autocomplete="off" asp-for="NomeRecebedor" class="form-control" />
                            <span asp-validation-for="NomeRecebedor" class="text-danger"></span>
                        </div>

                        <div class="form-group col-md-4">
                            <label asp-for="WhatsappRecebedor" class="control-label"></label>
                            <input autocomplete="off" asp-for="WhatsappRecebedor" class="form-control" />
                            <span asp-validation-for="WhatsappRecebedor" class="text-danger"></span>
                        </div>


                        <div class="form-group col-md-4">
                            <label asp-for="DataDeEntrega" class="control-label"></label>
                            <input autocomplete="off" asp-for="DataDeEntrega" id="datePicker" required class="form-control" />
                            <span asp-validation-for="DataDeEntrega" class="text-danger"></span>
                        </div>

                        @{
                            // Sua propriedade do tipo string que contém o horário no formato "HH:mm"
                            string horario = @Model.HoraDeEntrega;

                            // Dividir a string em horas e minutos
                            string[] partesHorario = horario.Split(':');
                            int horas = int.Parse(partesHorario[0]);
                            int minutos = int.Parse(partesHorario[1]);

                            // Adicionar 1 aos minutos

                            // Verificar se os minutos ultrapassaram 59 e ajustar as horas
                            minutos = 59;

                            // Formatar a string de horário resultante
                            string horarioDaentrega = $"{horas:D2}:{minutos:D2}";
                        }

                        <div class="form-group col-md-4">
                            <label asp-for="HoraDeEntrega" class="control-label">Horário da entrega:<b> @Model.HoraDeEntrega às @horarioDaentrega</b></label>
                            <select asp-for="HoraDeEntrega" id="selectHours" class="form-control">
                                <option value="@Model.HoraDeEntrega">@Model.HoraDeEntrega às @horarioDaentrega</option>
                            </select>
                            <span asp-validation-for="HoraDeEntrega" class="text-danger"></span>
                        </div>


                        <div class="form-group col-md-6">
                            <label asp-for="Cartinha" class="control-label"></label>
                            <textarea asp-for="Cartinha" class="form-control"></textarea>
                            <span asp-validation-for="Cartinha" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-6">
                            <label asp-for="Observacoes" class="control-label"></label>
                            <textarea asp-for="Observacoes" class="form-control"></textarea>
                            <span asp-validation-for="Observacoes" class="text-danger"></span>
                        </div>
                        <div class=" col-md-12">
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="PedidoEnviado" class="control-label"></label>
                            <input autocomplete="off" asp-for="PedidoEnviado" class="form-control" readOnly />
                            <span asp-validation-for="PedidoEnviado" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="PedidoEntregueEm" class="control-label"></label>
                            <input autocomplete="off" asp-for="PedidoEntregueEm" id="dataDois" class="form-control" />
                            <span asp-validation-for="PedidoEntregueEm" class="text-danger"></span>
                        </div>
                        <div class=" col-md-12">
                            <h4 class="mb-3">Cobrança</h4>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="TotalPedido" class="control-label"></label>
                            <input autocomplete="off" asp-for="TotalPedido" class="form-control" readOnly />
                            <span asp-validation-for="TotalPedido" class="text-danger"></span>
                        </div>

                        <div class="form-group col-md-4">
                            <label asp-for="TotalItensPedido" class="control-label"></label>
                            <input autocomplete="off" asp-for="TotalItensPedido" class="form-control" readOnly />
                            <span asp-validation-for="TotalItensPedido" class="text-danger"></span>
                        </div>
                    </div>
                    <div class=" col-md-12">
                        <h4 class="mb-3">Pagamento</h4>
                    </div>
                    @{
                        bool desabilitaComprovanteUm = !string.IsNullOrEmpty(Model.ComprovanteDePagamento);
                        bool desabilitaComprovanteDois = !string.IsNullOrEmpty(Model.ComprovanteSegundoPagamento);

                    }

                    <div class="form-group col-md-4">
                        <label asp-for="ComprovanteDePagamento" class="control-label">Comprovante 1º pagamento</label>
                        <input autocomplete="off" asp-for="ComprovanteDePagamento" class="form-control" />
                        <span asp-validation-for="ComprovanteDePagamento" class="text-danger"></span>
                        @if (desabilitaComprovanteUm)
                        {
                            <script>document.getElementById("ComprovanteDePagamento").readOnly = true;</script>
                        }
                    </div>

                    @if (desabilitaComprovanteUm)
                    {
                        
                        <div class="form-group col-md-4">
                            <label asp-for="ComprovanteSegundoPagamento" class="control-label">Comprovante 2º pagamento</label>
                            <input autocomplete="off" asp-for="ComprovanteSegundoPagamento" class="form-control" />
                            <span asp-validation-for="ComprovanteSegundoPagamento" class="text-danger"></span>
                            @if (desabilitaComprovanteDois)
                            {
                                <script>document.getElementById("ComprovanteSegundoPagamento").readOnly = true;</script>
                            }
                        </div>
                        
                    }

                    <div class="form-group col-md-4" id="pagamentoParcialDiv">
                        <label asp-for="PagamentoParcial" class="control-label"></label>
                        <input asp-for="PagamentoParcial" class="form-control" oninput="calcularTotal(this)" />
                        <span asp-validation-for="PagamentoParcial" class="text-danger"></span>
                         <span style="font-weight:bold;" id="totalResultante"></span>
                    </div>

                    <div class="form-group form-check col-md-12">
                        <label class="form-check-label">
                            <input autocomplete="off" class="form-check-input" asp-for="PagamentoPedido" onchange="verificarCheckbox()" /> @Html.DisplayNameFor(model => model.PagamentoPedido)
                             <div class="text-danger" id="selecioneOpcaoDiv" style="display:none; margin-left: 10px;">
                                <b>Selecione essa opção</b>
                            </div>
                        </label>
                    </div>
                    <div class="form-group form-check col-md-12">
                        <label class="form-check-label">
                            <input autocomplete="off" class="form-check-input" asp-for="PagamentoNaEntrega" /> @Html.DisplayNameFor(model => model.PagamentoNaEntrega)
                        </label>
                    </div>
                    <div class="form-group form-check col-md-12">
                        <label class="form-check-label">
                            <input autocomplete="off" class="form-check-input" asp-for="EntregaPedido" /> @Html.DisplayNameFor(model => model.EntregaPedido)
                        </label>
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-success btn-lg"> Salvar </button>
                    </div>
                </div>
            </form>



            <div>
                <a asp-action="Index">Back to List</a>
            </div>


        </div>
    </div>
</div>
















@section scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const selectHours = document.getElementById("selectHours");

            // Função para verificar se a data selecionada é igual à data atual
            function isDataSelecionadaIgualDataAtual(selectedDate) {
                const currentDate = new Date();
                currentDate.setHours(0, 0, 0, 0);
                selectedDate.setHours(0, 0, 0, 0);
                return selectedDate.getTime() === currentDate.getTime();
            }

            // Função para limpar as opções do select
            function limparOpcoesSelect() {
                while (selectHours.options.length > 0) {
                    selectHours.remove(0);
                }
            }

            // Função para verificar se duas datas estão no mesmo dia
            function isSameDay(date1, date2) {
                return (
                    date1.getFullYear() === date2.getFullYear() &&
                    date1.getMonth() === date2.getMonth() &&
                    date1.getDate() === date2.getDate()
                );
            }

            // Função para listar as horas com base na lógica desejada
            function listaHoraDoDiaAtual(selectedDate) {
                limparOpcoesSelect();

                const now = new Date();
                const currentHour = now.getHours();
                let startHour;

                // Verifica se a data selecionada é igual à data atual
                if (isDataSelecionadaIgualDataAtual(selectedDate)) {
                    startHour = currentHour + 4; // Inicia 4 horas à frente do horário atual
                    startHour = Math.max(4, startHour);
                    if (currentHour > 14) {
                        adicionarAvisoDeFaltaDeHorario();
                    }
                    if (currentHour < 6) {
                        startHour = 9;
                    }
                } else {
                    // Verificar se selectedDate é igual ao dia seguinte
                    const tomorrow = new Date();
                    tomorrow.setDate(tomorrow.getDate() + 1);

                    if (isSameDay(selectedDate, tomorrow) && currentHour < 6 || isSameDay(selectedDate, tomorrow) && currentHour > 18) {
                        // Faça algo se selectedDate for igual ao dia seguinte
                        startHour = 9;
                    } else {
                        startHour = 6; // Inicia às 6 da manhã se a data selecionada não for igual à data atual
                    }
                }

                const endHour = Math.min(19, 24);

                // Adiciona opções de horas em intervalos de 30 minutos
                for (let hour = startHour; hour < endHour; hour++) {
                    for (let minute = 0; minute < 60; minute += 60) {
                        const formattedHour = (hour < 10 ? '0' : '') + hour.toString();
                        const formattedMinute = minute === 0 ? '00' : minute.toString();
                        let optionText;

                        if (hour <= 12) {
                            optionText = `Manhã, ${formattedHour}h${formattedMinute} às ${formattedHour}h${(minute + 60) - 1}`;
                        } else {
                            optionText = `Tarde, ${formattedHour}h${formattedMinute} às ${formattedHour}h${(minute + 60) - 1}`;
                        }

                        const option = new Option(optionText, `${formattedHour}:${formattedMinute}`);
                        selectHours.add(option);
                    }
                }

                if (isDataSelecionadaIgualDataAtual(selectedDate)) {
                    // Adiciona a última opção se o horário atual for menor que 18h
                    // if (currentHour < 18) {
                    //     const lastOption = new Option(`Tarde 18h00 às 18h${(currentHour + 58) - 1}`, '18:00');
                    //     selectHours.add(lastOption);
                    // }
                }
            }

            // Função para adicionar uma opção inicial desativada ao select
            function adicionarOpcaoInicial() {
                const option = new Option('Escolha uma data primeiro', '');
                option.disabled = true;
                selectHours.add(option);
            }

            // Função para adicionar uma opção inicial desativada ao select quando não tiver mais horário disponível para entrega no dia
            function adicionarAvisoDeFaltaDeHorario() {
                const option = new Option('Não entregamos mais hoje, escolha outra data', '');
                option.disabled = true;
                selectHours.add(option);
            }

            // Adiciona um evento para chamar a função quando a data for alterada
            flatpickr("#datePicker", {
                dateFormat: "l, d/m/Y",
                locale: {
                    firstDayOfWeek: 0,
                    weekdays: {
                        shorthand: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],
                        longhand: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
                    },
                    months: {
                        shorthand: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
                        longhand: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
                    },
                },
                showMonths: 1,
                enableTime: false,
                allowInput: true,
                disableMobile: "true",
                onClose: function (selectedDates, dateStr, instance) {
                    limparOpcoesSelect();
                    if (selectedDates.length > 0) {
                        listaHoraDoDiaAtual(selectedDates[0]);

                        // Seleciona a opção com valor igual ao da propriedade HoraDeEntrega
                        const horaDeEntregaValue = "@Model.HoraDeEntrega";
                        for (let option of selectHours.options) {
                            if (option.value === horaDeEntregaValue) {
                                option.selected = true;
                                break;
                            }
                        }
                    } else {
                        adicionarOpcaoInicial();
                    }
                },
                defaultDate: "@Model.DataDeEntrega"
            });

            // Adiciona a opção inicial desativada ao carregar a página
            adicionarOpcaoInicial();
        });

















        flatpickr("#dataDois", {
            dateFormat: "l, d/m/Y",
            // minDate: "today",
            maxDate: "today",
            locale: {
                firstDayOfWeek: 0,
                weekdays: {
                    shorthand: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],
                    longhand: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
                },
                months: {
                    shorthand: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
                    longhand: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
                },
            },
            showMonths: 1,
            enableTime: false,
            allowInput: true,
            disableMobile: "true",
            onClose: function (selectedDates, dateStr, instance) {
                limparOpcoesSelect();
                if (selectedDates.length > 0) {
                    listaHoraDoDiaAtual(selectedDates[0]);
                } else {
                    adicionarOpcaoInicial();
                }

            }
        });
    </script>










    <script>
        $(document).ready(function () {
            // Seleciona todos os elementos de entrada com valor diferente de vazio
            $('input[value!=""]').each(function () {
                // Adiciona o estilo desejado
                $(this).css('font-weight', '800');
            });
        });
    </script>


    <script>

        var clientePagouTudo = false;
        window.onload = function () {
            calcularTotal();
         };
        function calcularTotal(input) {
            formatarMoeda(input)
            // Obtenha os valores dos inputs
            var totalPedido = parseFloat('@Model.TotalPedido.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)'.replace(",", "."));
            var pagamentoParcialInput = document.getElementById("PagamentoParcial");
            var pagamentoParcial = parseFloat(pagamentoParcialInput.value.replace(",", ".")) || 0;

            // Exiba o resultado no span com formatação
            var totalResultanteSpan = document.getElementById("totalResultante");

            // Chamada da função verificarCheckbox no início

            // Calcule o resultado
            var resultado = totalPedido - pagamentoParcial;

            // Adicione classe vermelha se pagamentoParcial ultrapassar totalPedido
            if (pagamentoParcial > totalPedido) {
                totalResultanteSpan.classList.add("text-warning");
                totalResultanteSpan.classList.remove("text-success");
                totalResultanteSpan.classList.remove("text-danger");
                totalResultanteSpan.textContent = "Pagamento maior que a divida";
                clientePagouTudo = false;
            } else if (pagamentoParcial === totalPedido) {
                totalResultanteSpan.classList.add("text-success");
                totalResultanteSpan.classList.remove("text-warning");
                totalResultanteSpan.classList.remove("text-danger");
                totalResultanteSpan.textContent = "Pedido completamente pago"
                clientePagouTudo = true;
            } else {
                totalResultanteSpan.classList.add("text-danger");
                totalResultanteSpan.classList.remove("text-success");
                totalResultanteSpan.classList.remove("text-warning");
                totalResultanteSpan.textContent = "Falta pagar:" + resultado.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                clientePagouTudo = false;
            }
 verificarCheckbox();

        }

        function verificarCheckbox() {
            var checkbox = document.getElementById("PagamentoPedido");
            var selecioneOpcaoDiv = document.getElementById("selecioneOpcaoDiv");
            var pagamentoParcialDiv = document.getElementById("pagamentoParcialDiv");

            if (!checkbox.checked && clientePagouTudo) {
                selecioneOpcaoDiv.style.display = "inline"; // Exibe a div
                pagamentoParcialDiv.style.display = "block";

            } else {
                selecioneOpcaoDiv.style.display = "none"; // Oculta a div               
             }

            if (checkbox.checked) {
                pagamentoParcialDiv.style.display = "none";

             }else{
                pagamentoParcialDiv.style.display = "block";
            }
        }

      

    </script>
    <script>
        function formatarMoeda(input) {
            if (!input || typeof input.value === 'undefined') {
                console.error('Input indefinido ou não possui a propriedade "value".');
                return;
            }
            // Remove todos os caracteres não numéricos
            let valor = input.value.replace(/\D/g, '');

            // Se o valor for vazio, exibe um espaço em branco no campo
            if (valor === '') {
                input.value = '';
                return;
            }

            // Substitui a vírgula por ponto e converte o valor para centavos
            valor = (parseFloat(valor.replace(',', '.')) / 100).toFixed(2);

            // Atualiza o valor no campo de entrada
            input.value = valor.replace('.', ',');
        }
    </script>
 
}