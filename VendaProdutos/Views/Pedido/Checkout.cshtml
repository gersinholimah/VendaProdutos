@model Pedido
    




<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>





 











@if (ViewBag.CarrinhoItens != null) { 




             <div class="container">
        <div class="row mb-30">
                <div class="col-12 ">


                    <h1 class="tit2_pradois pb-10">
                    Informações para registrar pedido
                    </h1>
                <p>Preencha os dados abaixo e selecione o botão VERDE.</p>
                 </div>
            </div>
 
  <div class="row">
    
    <div class="col-md-8 order-md-1">
      <h4 class="mb-3">Suas informações</h4>
            <form asp-action="Checkout" method="post" role="form" class="needs-validation" novalidate>
        <div class="row">
          <div class="col-sm-7 mb-3">
                        <label asp-for="NomeComprador">Seu Nome</label>
                        <input type="text" class="form-control" asp-for="NomeComprador" placeholder="" value="" required>
            <div class="invalid-feedback">
             Digite seu nome completo.
            </div>
                        <span asp-validation-for="NomeComprador" class="text-danger"></span>

          </div>
                    <div class="col-sm-5 mb-3">
                        <label asp-for="WhatsappComprador">Seu Whatsapp</label>
                        <input type="tel" asp-for="WhatsappComprador" class="form-control" placeholder="" required>
            <div class="invalid-feedback">
              Informe um telefone válido.
            </div>
                        <span asp-validation-for="WhatsappComprador" class="text-danger"></span>

          </div>
        </div>
                <h4 class="mb-3">Endereço da entrega</h4>
                    <label>Tipo de imóvel</label>
                <ul class="nav nav-tabs mb-3" id="myTabs">
                    <li class="nav-item">
                        <a class=" active btn btn-primary" id="tab1-tab" data-toggle="tab" href="#tab1">RESIDENCIAL</a>
                    </li>
                    <li class="nav-item">
                        <a class=" btn btn-primary" id="tab2-tab" data-toggle="tab" href="#tab2">COMERCIAL</a>
                    </li>

                </ul>
              

                <div class="row">


                    <div class="col-sm-6 mb-3">
                            <label>Cidade</label>
                            <select class="custom-select d-block w-100">
                                <option>Feira de Santana / BA</option>
                            </select>
                        </div>

                    <div class="col-sm-6 mb-3">
                        <label asp-for="BairroRecebedor" >Bairro</label>
                        <input type="text" class="form-control" asp-for="BairroRecebedor" placeholder="Nome do Bairro da entrega" required>
                            <div class="invalid-feedback">
                                Informe o nome do bairro onde o pedido será entregue.
                            </div>
                        <span asp-validation-for="BairroRecebedor" class="text-danger"></span>

                        </div>

                    <div class="col-sm-8 mb-3">
                        <label asp-for="RuaRecebedor">Rua</label>
                        <input type="text" class="form-control" asp-for="RuaRecebedor" placeholder="Nome da rua da entrega" required>
                            <div class="invalid-feedback">
                                Informe o nome da rua onde o pedido será entregue.
                            </div>
                        <span asp-validation-for="RuaRecebedor" class="text-danger"></span>

                        </div>


                    <div class="col-sm-4 mb-3">
                        <label asp-for="NumeroCasaRecebedor">Nº do imóvel </label>
                        <input type="text" class="form-control" asp-for="NumeroCasaRecebedor"  placeholder="Nº do imóvel da entrega" required>
                            <div class="invalid-feedback">
                                Informe o Nº do imóvel onde o pedido será entregue.
                            </div>
                        <span asp-validation-for="NumeroCasaRecebedor" class="text-danger"></span>

                        </div>
                    <div class="col-sm-12 mb-3">
                        <label asp-for="PontoDeReferencia">Ponto de referência <span class="text-muted">(Opcional)</span></label>
                        <input type="text" class="form-control" asp-for="PontoDeReferencia" placeholder="Imóvel próximo a...">
                            <div class="invalid-feedback">
                            Informe o Ponto de referência do endereço onde o pedido será entregue.
                            </div>
                        <span asp-validation-for="PontoDeReferencia" class="text-danger"></span>

                        </div>

                        <div class="col-sm-12 mb-3">
                            <label asp-for="Complemento">Complemento do endereço <span class="text-muted">(Opcional)</span></label>
                            <input type="text" class="form-control" asp-for="Complemento" placeholder="Condominio, hospital, prédio">
                            
                            <span asp-validation-for="Complemento" class="text-danger"></span>

                        </div>
                        
                </div>

                <div class="tab-content mt-2 ">

                    <div class="tab-pane fade show active" id="tab1">
                    </div>
                    <div class="tab-pane fade row" id="tab2">
                        <div class="col-sm-8 mb-3">
                            <label asp-for="NomeDaEmpresa">Nome da empresa</label>
                            <input type="text" class="form-control" asp-for="NomeDaEmpresa" placeholder="Nome da empresa" >
                            <div class="invalid-feedback">
                                Informe o nome da empresa onde o pedido será entregue.
                            </div>
                        </div>
                        <div class="col-sm-4 mb-3">
                            <label asp-for="Setor">Setor que a pessoa trabalha</label>
                            <input type="text" class="form-control" asp-for="Setor"  placeholder="Nome do setor" >
                            <div class="invalid-feedback">
                                Informe o nome do setor onde a pessoa que vai receber trabalha.
                            </div>
                            <span asp-validation-for="Setor" class="text-danger"></span>

                        </div>
                    </div>
                    
                    
                    
                    
                    
                    
                    
                </div>
                <h4 class="mb-3">Informações complementáres</h4>

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <label>De</label>
                        <input type="text" class="form-control" asp-for="QuemEstaEnviando" id="address2" placeholder="Quem está enviando?" required>
                        <span asp-validation-for="QuemEstaEnviando" class="text-danger"></span>

                        <div class="invalid-feedback">
                            Informe Nome da(s) pessoa(s) que está enviando
                        </div>
                    </div>
 
                    <div class="col-sm-6 mb-3">
                        <label asp-for="NomeRecebedor">Para:</label>
                        <input type="text" class="form-control" asp-for="NomeRecebedor" placeholder="Quem vai receber?" required>
                        <span asp-validation-for="NomeRecebedor" class="text-danger"></span>

                        <div class="invalid-feedback">
                            Informe o nome de quem vai receber
                        </div>

                    </div>

                    <div class="col-12 mb-3">
                        <label asp-for="Cartinha">Cartinha</label>
                        <textarea asp-for="Cartinha" class="form-control"></textarea>
                        <span asp-validation-for="Cartinha" class="text-danger"></span>

                    </div>

                    <div class="col-sm-6 mb-3">
                        <label asp-for="WhatsappRecebedor">Whatsapp de quem vai receber</label>
                        <input type="tel" class="form-control" asp-for="WhatsappRecebedor" placeholder="" required>
                        <span asp-validation-for="WhatsappRecebedor" class="text-danger"></span>

                        <div class="invalid-feedback">
                            Informe o nº telefone de quem vai receber
                        </div>
                    </div>
                    <div class="col-sm-6 mb-3">  </div>

                   

                        <div class="col-sm-6 mb-3">
                        <label asp-for="DataDeEntrega">Data da entrega</label>
                        <input type="text" asp-for="DataDeEntrega" id="datePicker" placeholder="Dia/mês/ano" class="form-control" width="276" autocomplete="off" required />
                        <span asp-validation-for="DataDeEntrega" class="text-danger"></span>
                        <span asp-validation-for="DataDeEntrega" class="text-danger"></span>

                        <div class="invalid-feedback">
                            Informe a data que o pedido deve ser entregue
                        </div>
                        <div id="output"></div>

                    </div>
             
                        <div class="col-sm-6 mb-3">
                        <label asp-for="HoraDeEntrega" for="selectHours">Hora da entrega:</label>
                        <select id="selectHours" asp-for="HoraDeEntrega"  class="form-control" required>
                        </select>
                        <span asp-validation-for="HoraDeEntrega" class="text-danger"></span>

                        <div class="invalid-feedback">
                            Informe o horário que o pedido deve ser entregue
                        </div>

                    </div>
                    <div class="col-sm-12 mb-3">
                        <label asp-for="Observacoes">Observações</label>
                        <textarea asp-for="Observacoes" class="form-control"></textarea>
                        <span asp-validation-for="Observacoes" class="text-danger"></span>

                    </div>
                </div>
               
                    
          
                 <button class="btn bt_avancar pt-10 pb-10 pr-40 pl-40 mt-10 mr-auto-xs ml-auto-xs d-block-xs" type="submit">Registrar Pedido</button>
 
      </form>
    </div>
        <div class="col-md-4 order-md-2 mb-4 mt-100 d-none">
            <h4 class="d-flex justify-content-between align-items-center mb-3">
                <span class="text-muted">Seu pedido</span>
             </h4>
            <ul class="list-group mb-3">
                 
                @{
                    bool freteGratis = false;
                    // Verifica se alguma opção extra não foi selecionada
                    foreach (var item in @ViewBag.CarrinhoItens)
                    {
                         
                          if (!item.Produto.OpcaoExtra && item.Produto.TaxaDeEntrega == 0)
                        {
                            freteGratis = true;
                     }
                  }
                }
                
                @foreach (var item in @ViewBag.CarrinhoItens)                {
                    <li class="list-group-item d-flex justify-content-between lh-condensed">
                        <img src="@item.Produto.ImagemUrl" alt="" class="avatar-lg rounded">

                        <div>
                            <h6 class="text-truncate font-size-18 font-weight-bold">
                                 @item.Produto.Nome 
                                </h6>

                             <small class="text-muted">Preço unitário R$ @item.Produto.PrecoPromocional</small>

  

                        </div>
                        <span class="badge badge-primary badge-pill" style="height: 18px;">@item.Quantidade</span>
                    </li>
                        
                    
                        
                }
                <li class="list-group-item d-flex justify-content-between lh-condensed">
                    @if (freteGratis)
                    {
                        <div class="text-success">
                            <h6 class="my-0">Frete Grátis</h6>
                            <small class="text-muted">@ViewBag.TotalPedido</small>
                        </div>
                    }
                    else
                    {
                        <div class="">
                            <h6 class="my-0">Frete</h6>
                            <small class="text-muted">Será informado no Whatsapp</small>
                        </div>
                     }
                   
                    <span class="text-muted"></span>
                </li>
                <li class="list-group-item  justify-content-between bg-light d-none">@*d-flex*@                 
                    <div class="text-success">
                        <h6 class="my-0">Promo code</h6>
                        <small>EXAMPLECODE</small>
                    </div>
                    <span class="text-success">-$5</span>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                    <h6>Soma total</h6>
                    <strong>R$ @ViewBag.TotalPedido.ToString("c")</strong>
                </li>
            </ul>

            <form class="card p-2 d-none">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Promo code">
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-secondary">Redeem</button>
                    </div>
                </div>
            </form>
        </div>
        
  </div>

  
    </div>
} else
{
        <div class="container">
        <div class="row">

    <div class="col-12">
        <h1 class="tit2_pradois pb-10">Seu carrinho de compras está vasio</h1>
        <p>Use o botão abaixo para selecionar o(s) produtos que serão adicionados ao seu carrinho</p>
        <a class="btn btn-primary pt-10 pb-10 pr-40 pl-40 mt-10 mr-auto-xs ml-auto-xs d-block-xs" asp-controller="Produto" asp-action="List">Selecionar Produto</a>
    </div>
    </div>
    </div>
     
}




<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
      <script>window.jQuery || document.write('<script src="/docs/4.5/assets/js/vendor/jquery.slim.min.js"><\/script>')</script><script src="/docs/4.5/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>
        <script>
                // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
      'use strict'

      window.addEventListener('load', function () {
        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.getElementsByClassName('needs-validation')

        // Loop over them and prevent submission
        Array.prototype.filter.call(forms, function (form) {
          form.addEventListener('submit', function (event) {
            if (form.checkValidity() === false) {
              event.preventDefault()
              event.stopPropagation()
            }

            form.classList.add('was-validated')
          }, false)
        })
      }, false)
    })()
        </script>










<script>
    document.addEventListener("DOMContentLoaded", function () {
        const selectHours = document.getElementById("selectHours");

        // Função para verificar se a data selecionada é igual à data atual
        function isDataSelecionadaIgualDataAtual(selectedDate) {
            const currentDate = new Date();
            currentDate.setHours(0, 0, 0, 0);
            selectedDate.setHours(0, 0, 0, 0);
            return selectedDate.getTime() === currentDate.getTime();
        }

        // Função para limpar as opções do select
        function limparOpcoesSelect() {
            while (selectHours.options.length > 0) {
                selectHours.remove(0);
            }
        }
        // Função para verificar se duas datas estão no mesmo dia
        function isSameDay(date1, date2) {
            return (
                date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate()
            );
        }

        // Função para listar as horas com base na lógica desejada
        function listaHoraDoDiaAtual(selectedDate) {
            limparOpcoesSelect();

            const now = new Date();
            const currentHour = now.getHours();
            let startHour;

            // Verifica se a data selecionada é igual à data atual
            if (isDataSelecionadaIgualDataAtual(selectedDate)) {
                startHour = currentHour + 4; // Inicia 4 horas à frente do horário atual
                startHour = Math.max(4, startHour);
                if (currentHour > 14) {
                    adicionarAvisoDeFaltaDeHorario();
                }
                if (currentHour < 6) {
                    startHour = 9
                }

            } else {
                // Verificar se selectedDate é igual ao dia seguinte
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);

                if (isSameDay(selectedDate, tomorrow) && currentHour < 6 || isSameDay(selectedDate, tomorrow) && currentHour > 18) {
                    // Faça algo se selectedDate for igual ao dia seguinte
                    startHour = 9;
                 } else {
                    startHour = 6; // Inicia às 6 da manhã se a data selecionada não for igual à data atual
                }
             }

            const endHour = Math.min(19, 24);

            // Adiciona opções de horas em intervalos de 30 minutos com texto personalizado
            for (let hour = startHour; hour < endHour; hour++) {
                for (let minute = 0; minute < 60; minute += 60) {
                    const formattedHour = (hour < 10 ? '0' : '') + hour.toString();
                    const formattedMinute = minute === 0 ? '00' : minute.toString();
                    let optionText;

                    if (hour <= 12) {
                        optionText = `Manhã, ${formattedHour}h${formattedMinute} às ${formattedHour}h${(minute + 60) - 1}`;
                    } else {
                        optionText = `Tarde, ${formattedHour}h${formattedMinute} às ${formattedHour}h${(minute + 60) - 1}`;
                    }

                    const option = new Option(optionText, `${formattedHour}:${formattedMinute}`);
                    selectHours.add(option);
                }
            }












            if (isDataSelecionadaIgualDataAtual(selectedDate)) {
                // Adiciona a última opção se o horário atual for menor que 18h
                // if (currentHour < 18) {
                //     const lastOption = new Option(`Tarde 18h00 às 18h59`, '18:00');
                //     selectHours.add(lastOption);
                // }
            }
        }

        // Função para adicionar uma opção inicial desativada ao select
        function adicionarOpcaoInicial() {
            const option = new Option('Escolha uma data primeiro', '');
            option.disabled = true;
            selectHours.add(option);
        }
        // Função para adicionar uma opção inicial desativada ao select quando não tiver mais horario disponível para entrega no dia
        function adicionarAvisoDeFaltaDeHorario() {
            const option = new Option('Não entregamos mais hoje, escolha outra data', '');
            option.disabled = true;
            selectHours.add(option);
        }

        // Adiciona um evento para chamar a função quando a data for alterada
        flatpickr("#datePicker", {
            dateFormat: "l, d/m/Y",
            minDate: "today",
            maxDate: new Date().fp_incr(60),
            locale: {
                firstDayOfWeek: 0,
                weekdays: {
                    shorthand: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],
                    longhand: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
                },
                months: {
                    shorthand: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
                    longhand: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
                },
            },
            showMonths: 1,
            enableTime: false,
            allowInput: true,
            disableMobile: "true",
            onClose: function (selectedDates, dateStr, instance) {
                limparOpcoesSelect();
                if (selectedDates.length > 0) {
                    listaHoraDoDiaAtual(selectedDates[0]);
                    horariosEsgotados()
                } else {
                    adicionarOpcaoInicial();
                }
             }
        });

        flatpickr("#timePicker", {
            enableTime: true,
            noCalendar: true,
            dateFormat: "H:i",
            defaultDate: "12:00",
            time_24hr: true,
            minuteIncrement: 1,
            allowInput: true,
        });

        // Adiciona a opção inicial desativada ao carregar a página
        adicionarOpcaoInicial();
    });
</script>




<script>
    // NÃO RECUPERA NADA, MAS AO MENOS LIMPA
    $(document).ready(function () {
        // Variáveis para armazenar os valores dos campos
        var nomeDaEmpresaValue = '';
        var setorValue = '';

        // Evento que é acionado quando a guia é alterada
        $('#myTabs a').on('shown.bs.tab', function (e) {
            var selectedTabId = $(e.target).attr('href'); // Obtém o ID da guia selecionada

            // Verifica se a guia selecionada é a guia2 (COMERCIAL)
            if (selectedTabId === '#tab2') {
                // Se já tiver valores armazenados, restaura os campos
                if (nomeDaEmpresaValue !== '' && setorValue !== '') {
                    $('#tab2 input[id="NomeDaEmpresa"]').val(nomeDaEmpresaValue);
                    $('#tab2 input[id="Setor"]').val(setorValue);
                } else {
                    // Se não houver valores armazenados, limpa os campos
                    $('#tab2 input[id="NomeDaEmpresa"]').val('');
                    $('#tab2 input[id="Setor"]').val('');
                }

                // Adiciona o atributo required aos campos desejados
                $('#tab2 input[id="NomeDaEmpresa"]').prop('required', true);
                $('#tab2 input[id="Setor"]').prop('required', true);
            } else {
                // Remove o atributo required dos campos desejados se a guia for diferente de tab2 (RESIDENCIAL)
                $('#tab2 input[id="NomeDaEmpresa"]').prop('required', false);
                $('#tab2 input[id="Setor"]').prop('required', false);
            }

            // Se a guia "RESIDENCIAL" for selecionada novamente, limpa os valores armazenados
            if (selectedTabId === '#tab1') {
                nomeDaEmpresaValue = '';
                setorValue = '';

                // Limpa os valores dos campos
                $('#tab2 input[id="NomeDaEmpresa"]').val('');
                $('#tab2 input[id="Setor"]').val('');
            }
        });

        // Evento ao clicar novamente no botão comercial
        $('#tab2-tab').on('click', function () {
            // Armazena os valores dos campos
            nomeDaEmpresaValue = $('#tab2 input[id="NomeDaEmpresa"]').val();
            setorValue = $('#tab2 input[id="Setor"]').val();
        });
    });
</script>



 

 
<script>
    function horariosEsgotados() {
    var entregasPorData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.EntregasPorData));
        const dataSelecionada = document.getElementById("datePicker").value;;

    // Exemplo de acesso aos dados
    for (var data in entregasPorData) {
        var horasRepetidas = contarHorasRepetidas(entregasPorData[data]);
            if (data == dataSelecionada) { 
        // Exibir alerta com as horas repetidas para cada data
        if (horasRepetidas.length > 0) {
            // alert("Data: " + data + "\nHoras Repetidas: " + horasRepetidas.join(", "));
                    // document.getElementById("aviso").textContent = "lista de horas" + horasRepetidas;

                    verificarHorasDoSelect(horasRepetidas)
        }
            }

    }
    }
    // Função para contar horas que se repetem
    function contarHorasRepetidas(horas) {
        var contadorHoras = {};
        var horasRepetidas = [];
        var limiteDePedidosPorDia = "@ViewBag.limiteDePedidoPorHora"
        // Conta as ocorrências de cada hora
        for (var i = 0; i < horas.length; i++) {
            var hora = horas[i];
            contadorHoras[hora] = (contadorHoras[hora] || 0) + 1;
        }

        // Filtra as horas que se repetem mais de 1 vez
        for (var hora in contadorHoras) {
            if (contadorHoras[hora] > limiteDePedidosPorDia) {
                // horasRepetidas.push(hora + " se repete " + contadorHoras[hora] + " vezes");
                 horasRepetidas.push(hora);

            }
        }

        return horasRepetidas;
    }

    function verificarHorasDoSelect(horasRepetidas) {
        // Obtém o elemento select
        var selectHoras = document.getElementById("selectHours");

        // Salva o índice da opção selecionada
        var indiceSelecionado = selectHoras.selectedIndex;

        // Percorre as opções do select
        for (var i = 0; i < selectHoras.options.length; i++) {
            // Obtém o valor do atributo "value" da opção atual
            var valorDaOpcao = selectHoras.options[i].value;

            // Verifica se o valor da opção está presente nas horas repetidas
            if (horasRepetidas.includes(valorDaOpcao)) {
                // Substitui a palavra antes da vírgula pelo novo texto
                selectHoras.options[i].text = "Esgotado" + selectHoras.options[i].text.substring(selectHoras.options[i].text.indexOf(','));

                // Desativa a opção
                selectHoras.options[i].disabled = true;
            } else {
                // Remove o texto "Esgotado" do label da opção, se existir
                selectHoras.options[i].text = selectHoras.options[i].text.replace("Esgotado", "");

                // Ativa a opção
                selectHoras.options[i].disabled = false;
            }
        }

        // Verifica se a opção selecionada inicialmente está desativada
        if (selectHoras.options[indiceSelecionado].disabled) {
            // Encontra a primeira opção válida e a seleciona
            for (var i = 0; i < selectHoras.options.length; i++) {
                if (!selectHoras.options[i].disabled) {
                    selectHoras.options[i].selected = true;
                    break;
                }
            }
        }
    }
</script>



 